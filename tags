!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_1D	array_1d.h	/^ARRAY_1D<T>::ARRAY_1D(const int size, const int min, const T value) $/;"	f	class:ARRAY_1D
ARRAY_1D	array_1d.h	/^class ARRAY_1D$/;"	c
ARRAY_2D	array_2d.h	/^  ARRAY_2D(const ARRAY_2D<T2>& at)$/;"	f	class:ARRAY_2D
ARRAY_2D	array_2d.h	/^  ARRAY_2D(const ARRAY_2D<T>& a)$/;"	f	class:ARRAY_2D
ARRAY_2D	array_2d.h	/^  ARRAY_2D(const int imin, const int imax, const int jmin, const int jmax,$/;"	f	class:ARRAY_2D
ARRAY_2D	array_2d.h	/^ARRAY_2D<T>::ARRAY_2D(const ARRAY_3D<T>& a3d, const int drop_component, $/;"	f	class:ARRAY_2D
ARRAY_2D	array_2d.h	/^class ARRAY_2D$/;"	c
ARRAY_3D	array_3d.h	/^  ARRAY_3D(const ARRAY_2D<T>& i2da, int k_size=1) \/\/ 3D array w\/ same halo$/;"	f	class:ARRAY_3D
ARRAY_3D	array_3d.h	/^  ARRAY_3D(const ARRAY_3D<T2>& ta)$/;"	f	class:ARRAY_3D
ARRAY_3D	array_3d.h	/^  ARRAY_3D(const ARRAY_3D<T>& ia, bool copy_contents = true)$/;"	f	class:ARRAY_3D
ARRAY_3D	array_3d.h	/^  ARRAY_3D(const ARRAY_3D<VECTOR_3D<T> >& va, const int component)$/;"	f	class:ARRAY_3D
ARRAY_3D	array_3d.h	/^  ARRAY_3D(const int imin, const int imax, const int jmin, const int jmax,$/;"	f	class:ARRAY_3D
ARRAY_3D	array_3d.h	/^class ARRAY_3D$/;"	c
Add_Moving_Grid_Convection_Term	convection.h	/^void CONVECTION<T>::Add_Moving_Grid_Convection_Term($/;"	f	class:CONVECTION
Add_Moving_Grid_Convection_Term	convection.h	/^void CONVECTION<T>::Add_Moving_Grid_Convection_Term(ARRAY_3D<T>& expression)$/;"	f	class:CONVECTION
Add_Quick_Scheme_Convection_Term	convection.h	/^void CONVECTION<T>::Add_Quick_Scheme_Convection_Term($/;"	f	class:CONVECTION
Add_Scalar_Convection_Term	convection.h	/^void CONVECTION<T>::Add_Scalar_Convection_Term(ARRAY_3D<T>& expression)$/;"	f	class:CONVECTION
Aggregate	data_aggregator.h	/^  void Aggregate(){$/;"	f	class:DATA_AGGREGATOR
Aggregate_All_Samples_On_Root	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Aggregate_All_Samples_On_Root()$/;"	f	class:POTENTIAL_ENERGY
BC_Type	parameters.h	/^typedef enum {FREE_SLIP, NO_SLIP} BC_Type;$/;"	t	typeref:enum:__anon1
Background_Potential_Energy	potential_energy.h	/^T POTENTIAL_ENERGY<T>::Background_Potential_Energy()$/;"	f	class:POTENTIAL_ENERGY
CELL	potential_energy.h	/^struct CELL$/;"	s
CONVECTION	convection.h	/^  CONVECTION(PARAMETERS<T> *p, MPI_DRIVER<T> *md, CURVILINEAR_GRID<T> *g, $/;"	f	class:CONVECTION
CONVECTION	convection.h	/^class CONVECTION$/;"	c
CURVILINEAR_GRID	curvilinear_grid.h	/^  CURVILINEAR_GRID(T xmin, T xmax, T ymin, T ymax, T zmin, T zmax, int imin, $/;"	f	class:CURVILINEAR_GRID
CURVILINEAR_GRID	curvilinear_grid.h	/^class CURVILINEAR_GRID$/;"	c
CURVILINEAR_MOVING_GRID	curvilinear_moving_grid.h	/^CURVILINEAR_MOVING_GRID<T>::CURVILINEAR_MOVING_GRID(PARAMETERS<T> *params, $/;"	f	class:CURVILINEAR_MOVING_GRID
CURVILINEAR_MOVING_GRID	curvilinear_moving_grid.h	/^class CURVILINEAR_MOVING_GRID : public CURVILINEAR_GRID<T>$/;"	c
Calculate	potential_energy.h	/^  T Calculate(){$/;"	f	class:POTENTIAL_ENERGY
Central_Velocity_Flux_Update	convection.h	/^void CONVECTION<T>::Central_Velocity_Flux_Update(ARRAY_3D<VECTOR_3D<T> >& u)$/;"	f	class:CONVECTION
Check_CFL	navier_stokes_solver.h	/^bool NAVIER_STOKES_SOLVER<T>::Check_CFL() $/;"	f	class:NAVIER_STOKES_SOLVER
Compute_Residual	pressure.h	/^void PRESSURE<T>::Compute_Residual(T& residual_l2, T& rhs_l2, T& residual_min, $/;"	f	class:PRESSURE
Condense_Array	pressure.h	/^void PRESSURE<T>::Condense_Array(ARRAY_3D<T>& P, ARRAY_3D<T>& P_condensed)$/;"	f	class:PRESSURE
Convert_ARRAY_3D_To_Linear_Array	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Convert_ARRAY_3D_To_Linear_Array()$/;"	f	class:POTENTIAL_ENERGY
Create_Copies	metric_quantities.h	/^  void Create_Copies(ARRAY_3D<T> *g11, ARRAY_3D<T> *g12, ARRAY_3D<T> *g13, $/;"	f	class:METRIC_QUANTITIES
Create_Output_Directory_If_Missing	mpi_driver.h	/^void MPI_DRIVER<T>::Create_Output_Directory_If_Missing(){$/;"	f	class:MPI_DRIVER
Cross_Product	vector_3d.h	/^  static VECTOR_3D<T> Cross_Product($/;"	f	class:VECTOR_3D
DATA_AGGREGATOR	data_aggregator.h	/^  DATA_AGGREGATOR(PARAMETERS<T> *pa, MPI_DRIVER<T> *md, CURVILINEAR_GRID<T> *g,$/;"	f	class:DATA_AGGREGATOR
DATA_AGGREGATOR	data_aggregator.h	/^class DATA_AGGREGATOR$/;"	c
Delete_Array	array_3d.h	/^  void Delete_Array() {delete [] array;}$/;"	f	class:ARRAY_3D
Dot_Product	vector_3d.h	/^  static T Dot_Product(const VECTOR_3D<T>& v1, const VECTOR_3D<T>& v2)$/;"	f	class:VECTOR_3D
ET_x	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
ET_y	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
ET_z	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
E_background	potential_energy.h	/^  T *E_background, *E_potential;$/;"	m	class:POTENTIAL_ENERGY
E_potential	potential_energy.h	/^  T *E_background, *E_potential;$/;"	m	class:POTENTIAL_ENERGY
Enforce_Density_BC	scalar.h	/^void SCALAR<T>::Enforce_Density_BC(ARRAY_3D<T>& rho)$/;"	f	class:SCALAR
Enforce_Incompressibility	navier_stokes_solver.h	/^  void Enforce_Incompressibility() {pressure->Solve();}$/;"	f	class:NAVIER_STOKES_SOLVER
Equal_Dimensions	array_2d.h	/^  static bool Equal_Dimensions(const ARRAY_2D<T>& a, const ARRAY_2D<T2>& b)$/;"	f	class:ARRAY_2D
Equal_Dimensions	array_3d.h	/^  static bool Equal_Dimensions(const ARRAY_3D<T>& a, const ARRAY_3D<T2>& b)$/;"	f	class:ARRAY_3D
Evolve_Nodes_With_MMPDE	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Evolve_Nodes_With_MMPDE()$/;"	f	class:MOVING_GRID_ENGINE
Exchange_Ghost_Values_For_Scalar_Field	mpi_driver.h	/^void MPI_DRIVER<T>::Exchange_Ghost_Values_For_Scalar_Field(ARRAY_3D<T>& scalar,$/;"	f	class:MPI_DRIVER
Exchange_Ghost_Values_For_Vector_Field	mpi_driver.h	/^void MPI_DRIVER<T>::Exchange_Ghost_Values_For_Vector_Field($/;"	f	class:MPI_DRIVER
Extend_Array	pressure.h	/^void PRESSURE<T>::Extend_Array(ARRAY_3D<T>& P_condensed, ARRAY_3D<T>& P)$/;"	f	class:PRESSURE
FREE_SLIP	parameters.h	/^typedef enum {FREE_SLIP, NO_SLIP} BC_Type;$/;"	e	enum:__anon1
Fill_In_Eight_Boundary_Corners	pressure.h	/^void PRESSURE<T>::Fill_In_Eight_Boundary_Corners(ARRAY_3D<T>& P)$/;"	f	class:PRESSURE
Fill_In_Residual_On_Six_Boundary_Faces	pressure.h	/^void PRESSURE<T>::Fill_In_Residual_On_Six_Boundary_Faces(ARRAY_3D<T>& Res, $/;"	f	class:PRESSURE
Fill_In_Twelve_Boundary_Edges	pressure.h	/^void PRESSURE<T>::Fill_In_Twelve_Boundary_Edges(ARRAY_3D<T>& Res)$/;"	f	class:PRESSURE
Find_Confining_Cell_On_Global_Grid	interpolant.h	/^void INTERPOLANT<T>::Find_Confining_Cell_On_Global_Grid($/;"	f	class:INTERPOLANT
Fix_New_Grid	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Fix_New_Grid()$/;"	f	class:CURVILINEAR_MOVING_GRID
G11	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G11	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G11_sub	curvilinear_grid.h	/^  ARRAY_1D<ARRAY_3D<T>* > *inv_Jac_sub, *G11_sub,*G12_sub,*G13_sub, $/;"	m	class:CURVILINEAR_GRID
G12	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G12	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G12_sub	curvilinear_grid.h	/^  ARRAY_1D<ARRAY_3D<T>* > *inv_Jac_sub, *G11_sub,*G12_sub,*G13_sub, $/;"	m	class:CURVILINEAR_GRID
G13	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G13	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G13_sub	curvilinear_grid.h	/^  ARRAY_1D<ARRAY_3D<T>* > *inv_Jac_sub, *G11_sub,*G12_sub,*G13_sub, $/;"	m	class:CURVILINEAR_GRID
G21	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G21	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G21_sub	curvilinear_grid.h	/^                          *G21_sub,*G22_sub,*G23_sub, $/;"	m	class:CURVILINEAR_GRID
G22	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G22	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G22_sub	curvilinear_grid.h	/^                          *G21_sub,*G22_sub,*G23_sub, $/;"	m	class:CURVILINEAR_GRID
G23	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G23	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G23_sub	curvilinear_grid.h	/^                          *G21_sub,*G22_sub,*G23_sub, $/;"	m	class:CURVILINEAR_GRID
G31	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G31	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G31_sub	curvilinear_grid.h	/^                          *G31_sub,*G32_sub,*G33_sub, *GCC_sub;$/;"	m	class:CURVILINEAR_GRID
G32	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G32	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G32_sub	curvilinear_grid.h	/^                          *G31_sub,*G32_sub,*G33_sub, *GCC_sub;$/;"	m	class:CURVILINEAR_GRID
G33	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
G33	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
G33_sub	curvilinear_grid.h	/^                          *G31_sub,*G32_sub,*G33_sub, *GCC_sub;$/;"	m	class:CURVILINEAR_GRID
GCC	curvilinear_grid.h	/^              *G11,*G12,*G13, *G21,*G22,*G23, *G31,*G32,*G33, *GCC;$/;"	m	class:CURVILINEAR_GRID
GCC	metric_quantities.h	/^  ARRAY_3D<T> *G11, *G12, *G13, *G21, *G22, *G23, *G31, *G32, *G33, *GCC;$/;"	m	class:METRIC_QUANTITIES
GCC_sub	curvilinear_grid.h	/^                          *G31_sub,*G32_sub,*G33_sub, *GCC_sub;$/;"	m	class:CURVILINEAR_GRID
Get_Grid_Communicator	mpi_driver.h	/^  MPI_Comm& Get_Grid_Communicator() {return grid_comm;}$/;"	f	class:MPI_DRIVER
Get_U_et	convection.h	/^  ARRAY_3D<T>* Get_U_et() { return U_et;}$/;"	f	class:CONVECTION
Get_U_xi	convection.h	/^  ARRAY_3D<T>* Get_U_xi() { return U_xi;}$/;"	f	class:CONVECTION
Get_U_zt	convection.h	/^  ARRAY_3D<T>* Get_U_zt() { return U_zt;}$/;"	f	class:CONVECTION
Get_Value	parameter_file_parser.h	/^  bool Get_Value(string key, double& value) $/;"	f	class:PARAMETER_FILE_PARSER
Get_Value	parameter_file_parser.h	/^  bool Get_Value(string key, int& value) $/;"	f	class:PARAMETER_FILE_PARSER
Get_Value	parameter_file_parser.h	/^  bool Get_Value(string key, string& value) $/;"	f	class:PARAMETER_FILE_PARSER
Halo_Size	array_2d.h	/^  int Halo_Size() const {return halo_size;}$/;"	f	class:ARRAY_2D
Halo_Size	array_3d.h	/^  int Halo_Size() const {return halo_size;}$/;"	f	class:ARRAY_3D
Halo_Size	curvilinear_grid.h	/^  int Halo_Size() const {return halo_size;}$/;"	f	class:CURVILINEAR_GRID
Has_NAN_Values	array_3d.h	/^  bool Has_NAN_Values() $/;"	f	class:ARRAY_3D
INTERPOLANT	interpolant.h	/^INTERPOLANT<T>::INTERPOLANT(MPI_DRIVER<T> *mpi,$/;"	f	class:INTERPOLANT
INTERPOLANT	interpolant.h	/^class INTERPOLANT$/;"	c
I_Max	array_2d.h	/^  int I_Max() const {return i_max;}$/;"	f	class:ARRAY_2D
I_Max	array_3d.h	/^  int I_Max() const {return i_max;}$/;"	f	class:ARRAY_3D
I_Max	curvilinear_grid.h	/^  int I_Max() const {return i_max;}$/;"	f	class:CURVILINEAR_GRID
I_Max_With_Halo	array_2d.h	/^  int I_Max_With_Halo() const {return i_max_w_h;}$/;"	f	class:ARRAY_2D
I_Max_With_Halo	array_3d.h	/^  int I_Max_With_Halo() const {return i_max_w_h;}$/;"	f	class:ARRAY_3D
I_Max_With_Halo	curvilinear_grid.h	/^  int I_Max_With_Halo() const {return i_max_w_h;}$/;"	f	class:CURVILINEAR_GRID
I_Min	array_2d.h	/^  int I_Min() const {return i_min;}$/;"	f	class:ARRAY_2D
I_Min	array_3d.h	/^  int I_Min() const {return i_min;}$/;"	f	class:ARRAY_3D
I_Min	curvilinear_grid.h	/^  int I_Min() const {return i_min;}$/;"	f	class:CURVILINEAR_GRID
I_Min_With_Halo	array_2d.h	/^  int I_Min_With_Halo() const {return i_min_w_h;}$/;"	f	class:ARRAY_2D
I_Min_With_Halo	array_3d.h	/^  int I_Min_With_Halo() const {return i_min_w_h;}$/;"	f	class:ARRAY_3D
I_Min_With_Halo	curvilinear_grid.h	/^  int I_Min_With_Halo() const {return i_min_w_h;}$/;"	f	class:CURVILINEAR_GRID
I_Size	array_3d.h	/^  int I_Size() const {return i_max - i_min + 1;}$/;"	f	class:ARRAY_3D
I_Size	curvilinear_grid.h	/^  int I_Size() const {return i_size;} \/\/nodes range:{i\/j\/k}_min..{i\/j\/k}_max$/;"	f	class:CURVILINEAR_GRID
I_Size_With_Halo	array_2d.h	/^  int I_Size_With_Halo() const {return i_size_w_h;}$/;"	f	class:ARRAY_2D
I_Size_With_Halo	array_3d.h	/^  int I_Size_With_Halo() const {return i_size_w_h;}$/;"	f	class:ARRAY_3D
Increment_Time_Step_Counter	navier_stokes_solver.h	/^bool NAVIER_STOKES_SOLVER<T>::Increment_Time_Step_Counter() $/;"	f	class:NAVIER_STOKES_SOLVER
Init_Array	array_2d.h	/^void ARRAY_2D<T>::Init_Array(const int imin, const int imax, const int jmin, $/;"	f	class:ARRAY_2D
Init_Depth_With_Random_Perturbation	parameters.h	/^void PARAMETERS<T>::Init_Depth_With_Random_Perturbation(const T pert_amplitude)$/;"	f	class:PARAMETERS
Init_Depth_With_Sinusoid_Perturbation_In_X_Direction	parameters.h	/^void PARAMETERS<T>::Init_Depth_With_Sinusoid_Perturbation_In_X_Direction($/;"	f	class:PARAMETERS
Init_Depth_With_Sloping_Bottom	parameters.h	/^void PARAMETERS<T>::Init_Depth_With_Sloping_Bottom($/;"	f	class:PARAMETERS
Initialize	mpi_driver.h	/^void MPI_DRIVER<T>::Initialize(int argc, char* argv[], int num_procs_in_x, int num_procs_in_y, int num_procs_in_z, bool x_periodic, bool y_periodic, bool z_periodic, int local_size_x, int local_size_y, int local_size_z)$/;"	f	class:MPI_DRIVER
Initialize_MPI	mpi_driver.h	/^void MPI_DRIVER<T>::Initialize_MPI(int argc, char* argv[], $/;"	f	class:MPI_DRIVER
Initialize_Metric_Quantities	pressure.h	/^void PRESSURE<T>::Initialize_Metric_Quantities(int level, $/;"	f	class:PRESSURE
Interpolate_Function_In_Quad	interpolant.h	/^T INTERPOLANT<T>::Interpolate_Function_In_Quad(VECTOR_3D<T>& P,$/;"	f	class:INTERPOLANT
Interpolate_Function_In_Triangle	interpolant.h	/^T INTERPOLANT<T>::Interpolate_Function_In_Triangle(VECTOR_3D<T>& p,$/;"	f	class:INTERPOLANT
Interpolate_On_New_Grid	interpolant.h	/^void INTERPOLANT<T>::Interpolate_On_New_Grid($/;"	f	class:INTERPOLANT
J_Max	array_2d.h	/^  int J_Max() const {return j_max;}$/;"	f	class:ARRAY_2D
J_Max	array_3d.h	/^  int J_Max() const {return j_max;}$/;"	f	class:ARRAY_3D
J_Max	curvilinear_grid.h	/^  int J_Max() const {return j_max;}$/;"	f	class:CURVILINEAR_GRID
J_Max_With_Halo	array_2d.h	/^  int J_Max_With_Halo() const {return j_max_w_h;}$/;"	f	class:ARRAY_2D
J_Max_With_Halo	array_3d.h	/^  int J_Max_With_Halo() const {return j_max_w_h;}$/;"	f	class:ARRAY_3D
J_Max_With_Halo	curvilinear_grid.h	/^  int J_Max_With_Halo() const {return j_max_w_h;}$/;"	f	class:CURVILINEAR_GRID
J_Min	array_2d.h	/^  int J_Min() const {return j_min;}$/;"	f	class:ARRAY_2D
J_Min	array_3d.h	/^  int J_Min() const {return j_min;}$/;"	f	class:ARRAY_3D
J_Min	curvilinear_grid.h	/^  int J_Min() const {return j_min;}$/;"	f	class:CURVILINEAR_GRID
J_Min_With_Halo	array_2d.h	/^  int J_Min_With_Halo() const {return j_min_w_h;}$/;"	f	class:ARRAY_2D
J_Min_With_Halo	array_3d.h	/^  int J_Min_With_Halo() const {return j_min_w_h;}$/;"	f	class:ARRAY_3D
J_Min_With_Halo	curvilinear_grid.h	/^  int J_Min_With_Halo() const {return j_min_w_h;}$/;"	f	class:CURVILINEAR_GRID
J_Size	array_3d.h	/^  int J_Size() const {return j_max - j_min + 1;}$/;"	f	class:ARRAY_3D
J_Size	curvilinear_grid.h	/^  int J_Size() const {return j_size;}$/;"	f	class:CURVILINEAR_GRID
J_Size_With_Halo	array_2d.h	/^  int J_Size_With_Halo() const {return j_size_w_h;}$/;"	f	class:ARRAY_2D
J_Size_With_Halo	array_3d.h	/^  int J_Size_With_Halo() const {return j_size_w_h;}$/;"	f	class:ARRAY_3D
Jacobian_diff	curvilinear_moving_grid.h	/^  ARRAY_3D<T>  *Jacobian_diff,                     \/\/ cell volume change$/;"	m	class:CURVILINEAR_MOVING_GRID
K_Max	array_3d.h	/^  int K_Max() const {return k_max;}$/;"	f	class:ARRAY_3D
K_Max	curvilinear_grid.h	/^  int K_Max() const {return k_max;}$/;"	f	class:CURVILINEAR_GRID
K_Max_With_Halo	array_3d.h	/^  int K_Max_With_Halo() const {return k_max_w_h;}$/;"	f	class:ARRAY_3D
K_Max_With_Halo	curvilinear_grid.h	/^  int K_Max_With_Halo() const {return k_max_w_h;}$/;"	f	class:CURVILINEAR_GRID
K_Min	array_3d.h	/^  int K_Min() const {return k_min;}$/;"	f	class:ARRAY_3D
K_Min	curvilinear_grid.h	/^  int K_Min() const {return k_min;}$/;"	f	class:CURVILINEAR_GRID
K_Min_With_Halo	array_3d.h	/^  int K_Min_With_Halo() const {return k_min_w_h;}$/;"	f	class:ARRAY_3D
K_Min_With_Halo	curvilinear_grid.h	/^  int K_Min_With_Halo() const {return k_min_w_h;}$/;"	f	class:CURVILINEAR_GRID
K_Size	array_3d.h	/^  int K_Size() const {return k_max - k_min + 1;}$/;"	f	class:ARRAY_3D
K_Size	curvilinear_grid.h	/^  int K_Size() const {return k_size;}$/;"	f	class:CURVILINEAR_GRID
K_Size_With_Halo	array_3d.h	/^  int K_Size_With_Halo() const {return k_size_w_h;}$/;"	f	class:ARRAY_3D
Limiter_Type	parameters.h	/^typedef enum {UPWIND, MUSCL, SHARP} Limiter_Type;$/;"	t	typeref:enum:__anon2
M	moving_grid_engine.h	/^  ARRAY_3D<T> *rho, *M, *prev_M; \/\/ monitor function$/;"	m	class:MOVING_GRID_ENGINE
METRIC_QUANTITIES	metric_quantities.h	/^  METRIC_QUANTITIES() : G11(0),G12(0),G13(0),G21(0),G22(0),G23(0),$/;"	f	class:METRIC_QUANTITIES
METRIC_QUANTITIES	metric_quantities.h	/^class METRIC_QUANTITIES$/;"	c
MOVING_GRID_ENGINE	moving_grid_engine.h	/^MOVING_GRID_ENGINE<T>::MOVING_GRID_ENGINE(PARAMETERS<T> *p, MPI_DRIVER<T> *mpi,$/;"	f	class:MOVING_GRID_ENGINE
MOVING_GRID_ENGINE	moving_grid_engine.h	/^class MOVING_GRID_ENGINE$/;"	c
MPI_DRIVER	mpi_driver.h	/^  MPI_DRIVER(PARAMETERS<T>& p) $/;"	f	class:MPI_DRIVER
MPI_DRIVER	mpi_driver.h	/^class MPI_DRIVER$/;"	c
MUSCL	parameters.h	/^typedef enum {UPWIND, MUSCL, SHARP} Limiter_Type;$/;"	e	enum:__anon2
MUSCL_LIMITER	universal_limiter.h	/^class MUSCL_LIMITER : public UNIVERSAL_LIMITER<T>$/;"	c
Magnitude	vector_3d.h	/^  T Magnitude() const$/;"	f	class:VECTOR_3D
Max_Index	array_1d.h	/^  int Max_Index() const {return max_n;}$/;"	f	class:ARRAY_1D
Min_Index	array_1d.h	/^  int Min_Index() const {return min_n;}$/;"	f	class:ARRAY_1D
Move_Grid	navier_stokes_solver.h	/^  void Move_Grid() $/;"	f	class:NAVIER_STOKES_SOLVER
Move_Grid_Nodes	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Move_Grid_Nodes()$/;"	f	class:MOVING_GRID_ENGINE
Move_Nodes_Vertically_Based_On_Fluid_Velocity	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Move_Nodes_Vertically_Based_On_Fluid_Velocity()$/;"	f	class:MOVING_GRID_ENGINE
NAVIER_STOKES_SOLVER	navier_stokes_solver.h	/^class NAVIER_STOKES_SOLVER$/;"	c
NO_SLIP	parameters.h	/^typedef enum {FREE_SLIP, NO_SLIP} BC_Type;$/;"	e	enum:__anon1
No_NAN	navier_stokes_solver.h	/^bool NAVIER_STOKES_SOLVER<T>::No_NAN()$/;"	f	class:NAVIER_STOKES_SOLVER
P	navier_stokes_solver.h	/^  ARRAY_3D<T> *P; \/\/, *rho;$/;"	m	class:NAVIER_STOKES_SOLVER
P	pressure.h	/^  ARRAY_3D<T> *P, *RHS, *Residual;$/;"	m	class:PRESSURE
PARAMETERS	parameters.h	/^  PARAMETERS(int ac, char** av) : argc(ac),argv(av) $/;"	f	class:PARAMETERS
PARAMETERS	parameters.h	/^class PARAMETERS$/;"	c
PARAMETER_FILE_PARSER	parameter_file_parser.h	/^  PARAMETER_FILE_PARSER(string filename) : parameter_filename(filename)$/;"	f	class:PARAMETER_FILE_PARSER
PARAMETER_FILE_PARSER	parameter_file_parser.h	/^class PARAMETER_FILE_PARSER$/;"	c
POTENTIAL_ENERGY	potential_energy.h	/^  POTENTIAL_ENERGY(PARAMETERS<T> *pa, MPI_DRIVER<T> *md, CURVILINEAR_GRID<T> *g,$/;"	f	class:POTENTIAL_ENERGY
POTENTIAL_ENERGY	potential_energy.h	/^class POTENTIAL_ENERGY$/;"	c
PRESSURE	pressure.h	/^PRESSURE<T>::PRESSURE(PARAMETERS<T> *par, MPI_DRIVER<T> *md, $/;"	f	class:PRESSURE
PRESSURE	pressure.h	/^class PRESSURE$/;"	c
PRINT_RESULTS	tridiagonal_solver.h	15;"	d
P_sub	pressure.h	/^  ARRAY_1D<ARRAY_3D<T>* > *P_sub, *RHS_sub, *Res_sub;$/;"	m	class:PRESSURE
Parse_Parameter_File	parameter_file_parser.h	/^int PARAMETER_FILE_PARSER<T>::Parse_Parameter_File()$/;"	f	class:PARAMETER_FILE_PARSER
Pick_Pivots_From_Global_Samples	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Pick_Pivots_From_Global_Samples()$/;"	f	class:POTENTIAL_ENERGY
Post_Process	navier_stokes_solver.h	/^void NAVIER_STOKES_SOLVER<T>::Post_Process()$/;"	f	class:NAVIER_STOKES_SOLVER
Processed	parameter_file_parser.h	/^  bool Processed() {return param_map!=NULL;}$/;"	f	class:PARAMETER_FILE_PARSER
Quick_Velocity_Flux_Update	convection.h	/^void CONVECTION<T>::Quick_Velocity_Flux_Update(ARRAY_3D<VECTOR_3D<T> >& u)$/;"	f	class:CONVECTION
RHS	pressure.h	/^  ARRAY_3D<T> *P, *RHS, *Residual;$/;"	m	class:PRESSURE
RHS	scalar.h	/^  ARRAY_3D<T> *Rho, *Rho_rest, *RHS, *RHS_for_AB;$/;"	m	class:SCALAR
RHS_for_AB	navier_stokes_solver.h	/^  ARRAY_3D<VECTOR_3D<T> > *u, *RHS_for_AB;$/;"	m	class:NAVIER_STOKES_SOLVER
RHS_for_AB	scalar.h	/^  ARRAY_3D<T> *Rho, *Rho_rest, *RHS, *RHS_for_AB;$/;"	m	class:SCALAR
RHS_sub	pressure.h	/^  ARRAY_1D<ARRAY_3D<T>* > *P_sub, *RHS_sub, *Res_sub;$/;"	m	class:PRESSURE
Raw_Array	array_2d.h	/^  T Raw_Array(int n) const {return array[n];}$/;"	f	class:ARRAY_2D
Raw_Array	array_2d.h	/^  T& Raw_Array(int n) {return array[n];}$/;"	f	class:ARRAY_2D
Raw_Array	array_3d.h	/^  T Raw_Array(const int n) const {return array[n];}$/;"	f	class:ARRAY_3D
Raw_Array	array_3d.h	/^  T& Raw_Array(const int n) {return array[n];}$/;"	f	class:ARRAY_3D
Raw_Array_Pointer	array_3d.h	/^  T* Raw_Array_Pointer() {return array;}$/;"	f	class:ARRAY_3D
Read_Binary_Local_Array	mpi_driver.h	/^int MPI_DRIVER<T>::Read_Binary_Local_Array(string a_name, ARRAY_3D<T>& a)$/;"	f	class:MPI_DRIVER
Read_Binary_Local_Array	mpi_driver.h	/^void MPI_DRIVER<T>::Read_Binary_Local_Array(ifstream& input, $/;"	f	class:MPI_DRIVER
Read_Binary_Local_Array	mpi_driver.h	/^void MPI_DRIVER<T>::Read_Binary_Local_Array(ifstream& input, ARRAY_3D<T>& a)$/;"	f	class:MPI_DRIVER
Read_Global_Array_From_Disk	mpi_driver.h	/^int MPI_DRIVER<T>::Read_Global_Array_From_Disk(string filename, $/;"	f	class:MPI_DRIVER
Receive_Initial_Local_Height	potential_energy.h	/^T POTENTIAL_ENERGY<T>::Receive_Initial_Local_Height()$/;"	f	class:POTENTIAL_ENERGY
Redistribute_Local_Arrays	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Redistribute_Local_Arrays()$/;"	f	class:POTENTIAL_ENERGY
Replace_With_Max_Value_Among_All_Procs	mpi_driver.h	/^void MPI_DRIVER<T>::Replace_With_Max_Value_Among_All_Procs(T& value){$/;"	f	class:MPI_DRIVER
Replace_With_Max_Value_Among_All_Procs	mpi_driver.h	/^void MPI_DRIVER<T>::Replace_With_Max_Value_Among_All_Procs(int& value){$/;"	f	class:MPI_DRIVER
Replace_With_Sum_On_All_Procs	mpi_driver.h	/^void MPI_DRIVER<T>::Replace_With_Sum_On_All_Procs(T& value){$/;"	f	class:MPI_DRIVER
Res_sub	pressure.h	/^  ARRAY_1D<ARRAY_3D<T>* > *P_sub, *RHS_sub, *Res_sub;$/;"	m	class:PRESSURE
Reset_All_Arrays	pressure.h	/^template<class T> void PRESSURE<T>::Reset_All_Arrays()$/;"	f	class:PRESSURE
Residual	pressure.h	/^  ARRAY_3D<T> *P, *RHS, *Residual;$/;"	m	class:PRESSURE
Rho	scalar.h	/^  ARRAY_3D<T> *Rho, *Rho_rest, *RHS, *RHS_for_AB;$/;"	m	class:SCALAR
Rho_Rest	scalar.h	/^  T Rho_Rest(const int i, const int j, const int k){return (*Rho_rest)(i,j,k);}$/;"	f	class:SCALAR
Rho_rest	scalar.h	/^  ARRAY_3D<T> *Rho, *Rho_rest, *RHS, *RHS_for_AB;$/;"	m	class:SCALAR
SCALAR	scalar.h	/^SCALAR<T>::SCALAR(PARAMETERS<T> *par,MPI_DRIVER<T> *md,CURVILINEAR_GRID<T> *g,$/;"	f	class:SCALAR
SCALAR	scalar.h	/^class SCALAR$/;"	c
SHARP	parameters.h	/^typedef enum {UPWIND, MUSCL, SHARP} Limiter_Type;$/;"	e	enum:__anon2
Save_Grid_From_Previous_Timestep	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Save_Grid_From_Previous_Timestep()$/;"	f	class:CURVILINEAR_MOVING_GRID
Save_Procs_Coordinates_In_File	mpi_driver.h	/^int MPI_DRIVER<T>::Save_Procs_Coordinates_In_File(string& output_filename)$/;"	f	class:MPI_DRIVER
Scalar_Solve	navier_stokes_solver.h	/^void NAVIER_STOKES_SOLVER<T>::Scalar_Solve(){$/;"	f	class:NAVIER_STOKES_SOLVER
Send_Final_Local_Height	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Send_Final_Local_Height(T final_cell_height)$/;"	f	class:POTENTIAL_ENERGY
Set_All_Elements_To	array_1d.h	/^void ARRAY_1D<T>::Set_All_Elements_To(const T element_value)$/;"	f	class:ARRAY_1D
Set_All_Elements_To	array_2d.h	/^void ARRAY_2D<T>::Set_All_Elements_To(const T element_value)$/;"	f	class:ARRAY_2D
Set_Depth_Based_On_Node_Locations	parameters.h	/^void PARAMETERS<T>::Set_Depth_Based_On_Node_Locations($/;"	f	class:PARAMETERS
Set_Initial_Density_Profile	scalar.h	/^void SCALAR<T>::Set_Initial_Density_Profile()$/;"	f	class:SCALAR
Set_Initial_Moving_Grid_Node_Positions	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Set_Initial_Moving_Grid_Node_Positions()$/;"	f	class:CURVILINEAR_MOVING_GRID
Set_Lid_Velocity	parameters.h	/^void PARAMETERS<T>::Set_Lid_Velocity(const VECTOR_3D<T>& v)$/;"	f	class:PARAMETERS
Set_Node_Position_Example_1	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Set_Node_Position_Example_1(T current_time)$/;"	f	class:CURVILINEAR_MOVING_GRID
Set_Parsable_Values	parameters.h	/^void PARAMETERS<T>::Set_Parsable_Values() {$/;"	f	class:PARAMETERS
Set_Pointers	metric_quantities.h	/^  void Set_Pointers(ARRAY_3D<T> *g11, ARRAY_3D<T> *g12, ARRAY_3D<T> *g13, $/;"	f	class:METRIC_QUANTITIES
Set_Remaining_Parameters	parameters.h	/^void PARAMETERS<T>::Set_Remaining_Parameters(){$/;"	f	class:PARAMETERS
Set_Uniform_Density_Profile	scalar.h	/^  void Set_Uniform_Density_Profile(const T rho_const) $/;"	f	class:SCALAR
Sharp	convection.h	/^void CONVECTION<T>::Sharp(ARRAY_3D<T>& scalar, $/;"	f	class:CONVECTION
Size	array_1d.h	/^  int Size() const {return size;}$/;"	f	class:ARRAY_1D
Smooth_Monitor_Function_In_Space	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Smooth_Monitor_Function_In_Space()$/;"	f	class:MOVING_GRID_ENGINE
Smooth_Monitor_Function_In_Time	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Smooth_Monitor_Function_In_Time()$/;"	f	class:MOVING_GRID_ENGINE
Smooth_Pressure	pressure.h	/^void PRESSURE<T>::Smooth_Pressure(int level, $/;"	f	class:PRESSURE
Smooth_Pressure_In_X	pressure.h	/^void PRESSURE<T>::Smooth_Pressure_In_X(ARRAY_3D<T>& P, ARRAY_3D<T>& RHS, $/;"	f	class:PRESSURE
Smooth_Pressure_In_Y	pressure.h	/^void PRESSURE<T>::Smooth_Pressure_In_Y($/;"	f	class:PRESSURE
Smooth_Pressure_In_Z	pressure.h	/^void PRESSURE<T>::Smooth_Pressure_In_Z($/;"	f	class:PRESSURE
Solve	pressure.h	/^template<class T> void PRESSURE<T>::Solve()$/;"	f	class:PRESSURE
Solve	scalar.h	/^void SCALAR<T>::Solve()$/;"	f	class:SCALAR
Solve_Array_Of_Tridiagonal_Linear_Systems	tridiagonal_solver.h	/^  void Solve_Array_Of_Tridiagonal_Linear_Systems(ARRAY_2D<T>& a, ARRAY_2D<T>& b, ARRAY_2D<T>& c, ARRAY_2D<VECTOR_3D<T> >& f, bool periodic, int prev_neighbor, int next_neighbor)$/;"	f	class:TRIDIAGONAL_SOLVER
Solve_Array_Of_Tridiagonal_Linear_Systems	tridiagonal_solver.h	/^  void Solve_Array_Of_Tridiagonal_Linear_Systems(ARRAY_2D<T>& a, ARRAY_2D<T>& b,ARRAY_2D<T>& c, ARRAY_2D<T>& f, bool periodic, int prev_neighbor, int next_neighbor)$/;"	f	class:TRIDIAGONAL_SOLVER
Solve_Non_Periodic_LS	tridiagonal_solver.h	/^void TRIDIAGONAL_SOLVER<T>::Solve_Non_Periodic_LS($/;"	f	class:TRIDIAGONAL_SOLVER
Solve_Non_Periodic_LS	tridiagonal_solver.h	/^void TRIDIAGONAL_SOLVER<T>::Solve_Non_Periodic_LS(ARRAY_2D<T>& a,ARRAY_2D<T>& b,$/;"	f	class:TRIDIAGONAL_SOLVER
Solve_Periodic_LS	tridiagonal_solver.h	/^void TRIDIAGONAL_SOLVER<T>::Solve_Periodic_LS(ARRAY_2D<T>& a, ARRAY_2D<T>& b, $/;"	f	class:TRIDIAGONAL_SOLVER
Sort_Global_Density_Array	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Sort_Global_Density_Array()$/;"	f	class:POTENTIAL_ENERGY
Split_Arrays_Based_On_Pivots	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Split_Arrays_Based_On_Pivots()$/;"	f	class:POTENTIAL_ENERGY
Start_Simulation_Timer	navier_stokes_solver.h	/^void NAVIER_STOKES_SOLVER<T>::Start_Simulation_Timer()$/;"	f	class:NAVIER_STOKES_SOLVER
Syncronize_All_Procs	mpi_driver.h	/^  void Syncronize_All_Procs() {MPI_Barrier(grid_comm);}$/;"	f	class:MPI_DRIVER
TRIDIAGONAL_SOLVER	tridiagonal_solver.h	/^  TRIDIAGONAL_SOLVER(MPI_DRIVER<T>& md) $/;"	f	class:TRIDIAGONAL_SOLVER
TRIDIAGONAL_SOLVER	tridiagonal_solver.h	/^class TRIDIAGONAL_SOLVER$/;"	c
TURBULENCE	turbulence.h	/^  TURBULENCE() : eddy_viscosity(NULL), eddy_diffusivity(NULL), tau(NULL) {}$/;"	f	class:TURBULENCE
TURBULENCE	turbulence.h	/^class TURBULENCE$/;"	c
TVD	convection.h	/^void CONVECTION<T>::TVD(ARRAY_3D<T>& scalar, $/;"	f	class:CONVECTION
Total_Potential_Energy	potential_energy.h	/^T POTENTIAL_ENERGY<T>::Total_Potential_Energy()$/;"	f	class:POTENTIAL_ENERGY
Total_Size	array_3d.h	/^  int Total_Size() const {return I_Size()*J_Size()*K_Size();}$/;"	f	class:ARRAY_3D
Total_Size_With_Halo	array_3d.h	/^  int Total_Size_With_Halo() const {return total_size;}$/;"	f	class:ARRAY_3D
U	convection.h	/^  ARRAY_3D<VECTOR_3D<T> > *U;$/;"	m	class:CONVECTION
UNIVERSAL_LIMITER	universal_limiter.h	/^class UNIVERSAL_LIMITER$/;"	c
UPWIND	parameters.h	/^typedef enum {UPWIND, MUSCL, SHARP} Limiter_Type;$/;"	e	enum:__anon2
UPWIND_LIMITER	universal_limiter.h	/^class UPWIND_LIMITER : public UNIVERSAL_LIMITER<T>$/;"	c
U_et	convection.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt,                \/\/ fluxes on faces  $/;"	m	class:CONVECTION
U_et	navier_stokes_solver.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; \/\/velocities on faces$/;"	m	class:NAVIER_STOKES_SOLVER
U_et	pressure.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; $/;"	m	class:PRESSURE
U_fluid	moving_grid_engine.h	/^  ARRAY_3D<VECTOR_3D<T> > *U_fluid, *prev_U_fluid;$/;"	m	class:MOVING_GRID_ENGINE
U_grid_et	convection.h	/^              *U_grid_xi, *U_grid_et, *U_grid_zt; $/;"	m	class:CONVECTION
U_grid_et	curvilinear_moving_grid.h	/^               *U_grid_xi, *U_grid_et, *U_grid_zt, \/\/ grid node velocities $/;"	m	class:CURVILINEAR_MOVING_GRID
U_grid_xi	convection.h	/^              *U_grid_xi, *U_grid_et, *U_grid_zt; $/;"	m	class:CONVECTION
U_grid_xi	curvilinear_moving_grid.h	/^               *U_grid_xi, *U_grid_et, *U_grid_zt, \/\/ grid node velocities $/;"	m	class:CURVILINEAR_MOVING_GRID
U_grid_zt	convection.h	/^              *U_grid_xi, *U_grid_et, *U_grid_zt; $/;"	m	class:CONVECTION
U_grid_zt	curvilinear_moving_grid.h	/^               *U_grid_xi, *U_grid_et, *U_grid_zt, \/\/ grid node velocities $/;"	m	class:CURVILINEAR_MOVING_GRID
U_xi	convection.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt,                \/\/ fluxes on faces  $/;"	m	class:CONVECTION
U_xi	navier_stokes_solver.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; \/\/velocities on faces$/;"	m	class:NAVIER_STOKES_SOLVER
U_xi	pressure.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; $/;"	m	class:PRESSURE
U_zt	convection.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt,                \/\/ fluxes on faces  $/;"	m	class:CONVECTION
U_zt	navier_stokes_solver.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; \/\/velocities on faces$/;"	m	class:NAVIER_STOKES_SOLVER
U_zt	pressure.h	/^  ARRAY_3D<T> *U_xi, *U_et, *U_zt; $/;"	m	class:PRESSURE
Update_Bed_And_Lid_Velocities	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Update_Bed_And_Lid_Velocities()$/;"	f	class:CURVILINEAR_MOVING_GRID
Update_Jacobian_Difference	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Update_Jacobian_Difference()$/;"	f	class:CURVILINEAR_MOVING_GRID
Update_Monitor_Function	moving_grid_engine.h	/^void MOVING_GRID_ENGINE<T>::Update_Monitor_Function()$/;"	f	class:MOVING_GRID_ENGINE
Update_Node_Velocities	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Update_Node_Velocities()$/;"	f	class:CURVILINEAR_MOVING_GRID
Update_RHS	scalar.h	/^void SCALAR<T>::Update_RHS()$/;"	f	class:SCALAR
VECTOR_3D	vector_3d.h	/^  VECTOR_3D() : x(T()), y(T()), z(T())$/;"	f	class:VECTOR_3D
VECTOR_3D	vector_3d.h	/^  VECTOR_3D(const T n_in)$/;"	f	class:VECTOR_3D
VECTOR_3D	vector_3d.h	/^  VECTOR_3D(const T x_in, const T y_in, const T z_in)$/;"	f	class:VECTOR_3D
VECTOR_3D	vector_3d.h	/^  VECTOR_3D(const VECTOR_3D<T>& v_in) : x(v_in.x), y(v_in.y), z(v_in.z)$/;"	f	class:VECTOR_3D
VECTOR_3D	vector_3d.h	/^class VECTOR_3D$/;"	c
Write_Binary_Local_Array	mpi_driver.h	/^int MPI_DRIVER<T>::Write_Binary_Local_Array(string a_name, ARRAY_3D<T>& a)$/;"	f	class:MPI_DRIVER
Write_Binary_Local_Array	mpi_driver.h	/^void MPI_DRIVER<T>::Write_Binary_Local_Array(ofstream& output, $/;"	f	class:MPI_DRIVER
Write_Binary_Local_Array	mpi_driver.h	/^void MPI_DRIVER<T>::Write_Binary_Local_Array(ofstream& output, ARRAY_3D<T>& a)$/;"	f	class:MPI_DRIVER
Write_Global_Array_To_Disk	mpi_driver.h	/^int MPI_DRIVER<T>::Write_Global_Array_To_Disk(string a_name, ARRAY_3D<T>& a, $/;"	f	class:MPI_DRIVER
Write_Global_Array_To_Disk	mpi_driver.h	/^int MPI_DRIVER<T>::Write_Global_Array_To_Disk(string va_name, $/;"	f	class:MPI_DRIVER
Write_Local_Array_To_Disk	mpi_driver.h	/^  int Write_Local_Array_To_Disk(string a_name, ARRAY_2D<T>& a, int timestep = 0)$/;"	f	class:MPI_DRIVER
Write_Local_Array_To_Disk	mpi_driver.h	/^  int Write_Local_Array_To_Disk(string va_name, ARRAY_2D<VECTOR_3D<T> >& va, $/;"	f	class:MPI_DRIVER
Write_Local_Array_To_Disk	mpi_driver.h	/^int MPI_DRIVER<T>::Write_Local_Array_To_Disk(string a_name, ARRAY_3D<T>& a, bool add_proc_number, int timestep)$/;"	f	class:MPI_DRIVER
Write_Local_Array_To_Disk	mpi_driver.h	/^int MPI_DRIVER<T>::Write_Local_Array_To_Disk(string va_name, ARRAY_3D<VECTOR_3D<T> >& va, int timestep)$/;"	f	class:MPI_DRIVER
Write_Local_Array_To_Disk	mpi_driver.h	/^template <class T> int MPI_DRIVER<T>::Write_Local_Array_To_Disk($/;"	f	class:MPI_DRIVER
Write_To_Disk	data_aggregator.h	/^  void Write_To_Disk(){$/;"	f	class:DATA_AGGREGATOR
Write_To_Disk	potential_energy.h	/^void POTENTIAL_ENERGY<T>::Write_To_Disk()$/;"	f	class:POTENTIAL_ENERGY
Write_Volume_Evolution_To_Disk	curvilinear_moving_grid.h	/^void CURVILINEAR_MOVING_GRID<T>::Write_Volume_Evolution_To_Disk()$/;"	f	class:CURVILINEAR_MOVING_GRID
XI_x	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
XI_y	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
XI_z	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
ZT_x	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
ZT_y	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
ZT_z	curvilinear_grid.h	/^  ARRAY_3D<T> *XI_x,*XI_y,*XI_z, *ET_x,*ET_y,*ET_z, *ZT_x,*ZT_y,*ZT_z,$/;"	m	class:CURVILINEAR_GRID
__ARRAY_1D__	array_1d.h	7;"	d
__ARRAY_2D__	array_2d.h	8;"	d
__ARRAY_3D__	array_3d.h	8;"	d
__CONVECTION__	convection.h	5;"	d
__CURVILINEAR_GRID__	curvilinear_grid.h	7;"	d
__CURVILINEAR_MOVING_GRID__	curvilinear_moving_grid.h	7;"	d
__DATA_AGGREGATOR__	data_aggregator.h	3;"	d
__INTERPOLANT__	interpolant.h	7;"	d
__METRIC_QUANTITIES__	metric_quantities.h	5;"	d
__MOVING_GRID_ENGINE__	moving_grid_engine.h	7;"	d
__MPI_DRIVER__	mpi_driver.h	5;"	d
__NAVIER_STOKES_SOLVER__	navier_stokes_solver.h	3;"	d
__PARAMETERS__	parameters.h	5;"	d
__PARAMETER_FILE_PARSER__	parameter_file_parser.h	5;"	d
__POTENTIAL_ENERGY__	potential_energy.h	3;"	d
__PRESSURE__	pressure.h	5;"	d
__SCALAR__	scalar.h	4;"	d
__TRIDIAGONAL_SOLVER__	tridiagonal_solver.h	4;"	d
__TURBULENCE__	turbulence.h	4;"	d
__UNIVERSAL_LIMITER__	universal_limiter.h	6;"	d
__VECTOR_3D__	vector_3d.h	5;"	d
aggregate_data	parameters.h	/^      potential_energy, scalar_advection, read_grid_from_file, aggregate_data,$/;"	m	class:PARAMETERS
amp_p_grad	parameters.h	/^    omega, amp_p_grad, freq_p_grad;$/;"	m	class:PARAMETERS
argc	parameters.h	/^  int argc; $/;"	m	class:PARAMETERS
argv	parameters.h	/^  char** argv;$/;"	m	class:PARAMETERS
array	array_1d.h	/^  T*  array;$/;"	m	class:ARRAY_1D
array	array_2d.h	/^  T* array;$/;"	m	class:ARRAY_2D
array	array_3d.h	/^  T*  array;$/;"	m	class:ARRAY_3D
array_size	data_aggregator.h	/^  int array_size, host_cpu, ts_counter;$/;"	m	class:DATA_AGGREGATOR
array_size	potential_energy.h	/^  int array_size;$/;"	m	class:POTENTIAL_ENERGY
back_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
back_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
bed_velocity	parameters.h	/^  ARRAY_2D<VECTOR_3D<T> > *lid_velocity, *bed_velocity;$/;"	m	class:PARAMETERS
cell_type	potential_energy.h	/^  MPI_Datatype cell_type;$/;"	m	class:POTENTIAL_ENERGY
center	data_aggregator.h	/^  VECTOR_3D<int> center;$/;"	m	class:DATA_AGGREGATOR
compare_cells	potential_energy.h	/^int POTENTIAL_ENERGY<T>::compare_cells(const void *a, const void *b)$/;"	f	class:POTENTIAL_ENERGY
convection	moving_grid_engine.h	/^  CONVECTION<T> *convection;$/;"	m	class:MOVING_GRID_ENGINE
convection	scalar.h	/^  CONVECTION<T>* convection;$/;"	m	class:SCALAR
convection0	navier_stokes_solver.h	/^  CONVECTION<T>* convection0, *convection1;$/;"	m	class:NAVIER_STOKES_SOLVER
convection1	navier_stokes_solver.h	/^  CONVECTION<T>* convection0, *convection1;$/;"	m	class:NAVIER_STOKES_SOLVER
coriolis	parameters.h	/^      turbulence, moving_grid, open_top, variable_fixed_depth, coriolis;$/;"	m	class:PARAMETERS
critical_cfl	parameters.h	/^    mg_tol_relative_resid, max_cfl, critical_cfl;$/;"	m	class:PARAMETERS
data_aggregator	navier_stokes_solver.h	/^  DATA_AGGREGATOR<T>* data_aggregator;$/;"	m	class:NAVIER_STOKES_SOLVER
delete_arrays	metric_quantities.h	/^  bool delete_arrays;$/;"	m	class:METRIC_QUANTITIES
delta_time	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
depth	parameters.h	/^  ARRAY_2D<T> *depth;$/;"	m	class:PARAMETERS
domain_skew_angle	parameters.h	/^    domain_skew_angle, y_stretching_ratio;$/;"	m	class:PARAMETERS
east_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
east_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
eddy_diffusivity	turbulence.h	/^  ARRAY_3D<T> *eddy_viscosity, *eddy_diffusivity;$/;"	m	class:TURBULENCE
eddy_viscosity	turbulence.h	/^  ARRAY_3D<T> *eddy_viscosity, *eddy_diffusivity;$/;"	m	class:TURBULENCE
elapsed_time	parameters.h	/^  float elapsed_time, total_time;$/;"	m	class:PARAMETERS
freq_p_grad	parameters.h	/^    omega, amp_p_grad, freq_p_grad;$/;"	m	class:PARAMETERS
frnt_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
frnt_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
g	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
global_F	interpolant.h	/^  ARRAY_3D<T> *global_F;$/;"	m	class:INTERPOLANT
global_array_size	potential_energy.h	/^  int local_array_size, global_array_size, local_sorted_array_size;$/;"	m	class:POTENTIAL_ENERGY
global_grid	interpolant.h	/^  ARRAY_3D<VECTOR_3D<T> > *global_grid;$/;"	m	class:INTERPOLANT
grid	convection.h	/^  CURVILINEAR_GRID<T> *grid;$/;"	m	class:CONVECTION
grid	curvilinear_grid.h	/^  ARRAY_3D<VECTOR_3D<T> >* grid;$/;"	m	class:CURVILINEAR_GRID
grid	data_aggregator.h	/^  CURVILINEAR_GRID<T> *grid;$/;"	m	class:DATA_AGGREGATOR
grid	navier_stokes_solver.h	/^  CURVILINEAR_GRID<T>* grid;$/;"	m	class:NAVIER_STOKES_SOLVER
grid	potential_energy.h	/^  CURVILINEAR_GRID<T> *grid;$/;"	m	class:POTENTIAL_ENERGY
grid	pressure.h	/^  CURVILINEAR_GRID<T> *grid;$/;"	m	class:PRESSURE
grid	scalar.h	/^  CURVILINEAR_GRID<T>* grid;$/;"	m	class:SCALAR
grid_comm	mpi_driver.h	/^  MPI_Comm grid_comm;$/;"	m	class:MPI_DRIVER
grid_filename	parameters.h	/^  std::string output_dir, grid_filename;$/;"	m	class:PARAMETERS
halo	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
halo	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
halo_size	array_2d.h	/^  int i_size_w_h, j_size_w_h, halo_size;$/;"	m	class:ARRAY_2D
halo_size	array_3d.h	/^  int i_size_w_h, j_size_w_h, k_size_w_h, halo_size;$/;"	m	class:ARRAY_3D
halo_size	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
halo_size	parameters.h	/^      halo_size, num_local_nodes_x, num_local_nodes_y,num_local_nodes_z,$/;"	m	class:PARAMETERS
host_cpu	data_aggregator.h	/^  int array_size, host_cpu, ts_counter;$/;"	m	class:DATA_AGGREGATOR
i_max	array_2d.h	/^  int i_min, i_max, j_min, j_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_2D
i_max	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
i_max	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
i_max	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
i_max_w_h	array_2d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h;$/;"	m	class:ARRAY_2D
i_max_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
i_max_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
i_max_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
i_min	array_2d.h	/^  int i_min, i_max, j_min, j_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_2D
i_min	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
i_min	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
i_min	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
i_min_w_h	array_2d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h;$/;"	m	class:ARRAY_2D
i_min_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
i_min_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
i_min_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
i_size	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
i_size_w_h	array_2d.h	/^  int i_size_w_h, j_size_w_h, halo_size;$/;"	m	class:ARRAY_2D
i_size_w_h	array_3d.h	/^  int i_size_w_h, j_size_w_h, k_size_w_h, halo_size;$/;"	m	class:ARRAY_3D
i_size_w_h	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
imax	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
imax_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
imin	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
imin_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
inv_Jac_sub	curvilinear_grid.h	/^  ARRAY_1D<ARRAY_3D<T>* > *inv_Jac_sub, *G11_sub,*G12_sub,*G13_sub, $/;"	m	class:CURVILINEAR_GRID
inverse_Jacobian	curvilinear_grid.h	/^              *inverse_Jacobian,$/;"	m	class:CURVILINEAR_GRID
isnan	vector_3d.h	/^inline bool isnan(const VECTOR_3D<T>& v)$/;"	f
j_max	array_2d.h	/^  int i_min, i_max, j_min, j_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_2D
j_max	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
j_max	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
j_max	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
j_max_w_h	array_2d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h;$/;"	m	class:ARRAY_2D
j_max_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
j_max_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
j_max_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
j_min	array_2d.h	/^  int i_min, i_max, j_min, j_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_2D
j_min	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
j_min	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
j_min	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
j_min_w_h	array_2d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h;$/;"	m	class:ARRAY_2D
j_min_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
j_min_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
j_min_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
j_size	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
j_size_w_h	array_2d.h	/^  int i_size_w_h, j_size_w_h, halo_size;$/;"	m	class:ARRAY_2D
j_size_w_h	array_3d.h	/^  int i_size_w_h, j_size_w_h, k_size_w_h, halo_size;$/;"	m	class:ARRAY_3D
j_size_w_h	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
jmax	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
jmax_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
jmin	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
jmin_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
k_max	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
k_max	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
k_max	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
k_max_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
k_max_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
k_max_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
k_min	array_3d.h	/^  int i_min, i_max, j_min, j_max, k_min, k_max; \/\/ w\/o halo regions$/;"	m	class:ARRAY_3D
k_min	curvilinear_grid.h	/^      i_min, i_max, j_min, j_max, k_min, k_max,$/;"	m	class:CURVILINEAR_GRID
k_min	parameters.h	/^      i_min, i_max, j_min, j_max, k_min, k_max;$/;"	m	class:PARAMETERS
k_min_w_h	array_3d.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h;$/;"	m	class:ARRAY_3D
k_min_w_h	curvilinear_grid.h	/^      i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,\/\/w\/ halo$/;"	m	class:CURVILINEAR_GRID
k_min_w_h	parameters.h	/^  int i_min_w_h, i_max_w_h, j_min_w_h, j_max_w_h, k_min_w_h, k_max_w_h,$/;"	m	class:PARAMETERS
k_size	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
k_size_w_h	array_3d.h	/^  int i_size_w_h, j_size_w_h, k_size_w_h, halo_size;$/;"	m	class:ARRAY_3D
k_size_w_h	curvilinear_grid.h	/^  int i_size, j_size, k_size, i_size_w_h, j_size_w_h, k_size_w_h, halo_size,    $/;"	m	class:CURVILINEAR_GRID
kmax	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
kmax_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
kmin	scalar.h	/^  T imin, imax, jmin, jmax, kmin, kmax, halo; \/\/set from grid$/;"	m	class:SCALAR
kmin_w_h	moving_grid_engine.h	/^  int imin_w_h, imax_w_h, jmin_w_h, jmax_w_h, kmin_w_h, kmax_w_h, halo;$/;"	m	class:MOVING_GRID_ENGINE
lid_velocity	parameters.h	/^  ARRAY_2D<VECTOR_3D<T> > *lid_velocity, *bed_velocity;$/;"	m	class:PARAMETERS
limiter	convection.h	/^  UNIVERSAL_LIMITER<T> *limiter;$/;"	m	class:CONVECTION
local_array_size	potential_energy.h	/^  int local_array_size, global_array_size, local_sorted_array_size;$/;"	m	class:POTENTIAL_ENERGY
local_grid_lower_bound	mpi_driver.h	/^  int *local_grid_lower_bound, *local_grid_upper_bound;$/;"	m	class:MPI_DRIVER
local_grid_upper_bound	mpi_driver.h	/^  int *local_grid_lower_bound, *local_grid_upper_bound;$/;"	m	class:MPI_DRIVER
local_sorted_array_size	potential_energy.h	/^  int local_array_size, global_array_size, local_sorted_array_size;$/;"	m	class:POTENTIAL_ENERGY
lower_boundary	convection.h	/^  int *lower_boundary, *upper_boundary;           \/\/ set per proc$/;"	m	class:CONVECTION
max_cfl	parameters.h	/^    mg_tol_relative_resid, max_cfl, critical_cfl;$/;"	m	class:PARAMETERS
max_mg_iters	parameters.h	/^      mg_sub_levels, max_mg_iters, mg_max_smoothing_iters, $/;"	m	class:PARAMETERS
max_n	array_1d.h	/^  int min_n, max_n, size;$/;"	m	class:ARRAY_1D
max_timestep	parameters.h	/^ int  restart_timestep, max_timestep, $/;"	m	class:PARAMETERS
mg_max_smoothing_iters	parameters.h	/^      mg_sub_levels, max_mg_iters, mg_max_smoothing_iters, $/;"	m	class:PARAMETERS
mg_smoothing_converg_thresh	parameters.h	/^  T mg_smoothing_converg_thresh, mg_tol_absolute_resid, mg_tol_error_resid, $/;"	m	class:PARAMETERS
mg_smoothing_sub_iters	parameters.h	/^      mg_smoothing_sub_iters, $/;"	m	class:PARAMETERS
mg_sub_levels	parameters.h	/^      mg_sub_levels, max_mg_iters, mg_max_smoothing_iters, $/;"	m	class:PARAMETERS
mg_tol_absolute_resid	parameters.h	/^  T mg_smoothing_converg_thresh, mg_tol_absolute_resid, mg_tol_error_resid, $/;"	m	class:PARAMETERS
mg_tol_error_resid	parameters.h	/^  T mg_smoothing_converg_thresh, mg_tol_absolute_resid, mg_tol_error_resid, $/;"	m	class:PARAMETERS
mg_tol_relative_resid	parameters.h	/^    mg_tol_relative_resid, max_cfl, critical_cfl;$/;"	m	class:PARAMETERS
min_n	array_1d.h	/^  int min_n, max_n, size;$/;"	m	class:ARRAY_1D
molecular_diffusivity	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
molecular_viscosity	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
moving_grid	moving_grid_engine.h	/^  CURVILINEAR_MOVING_GRID<T> *moving_grid;$/;"	m	class:MOVING_GRID_ENGINE
moving_grid	parameters.h	/^      turbulence, moving_grid, open_top, variable_fixed_depth, coriolis;$/;"	m	class:PARAMETERS
moving_grid_engine	navier_stokes_solver.h	/^  MOVING_GRID_ENGINE<T>* moving_grid_engine;$/;"	m	class:NAVIER_STOKES_SOLVER
mpi_comm	tridiagonal_solver.h	/^  MPI_Comm& mpi_comm;$/;"	m	class:TRIDIAGONAL_SOLVER
mpi_driver	convection.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:CONVECTION
mpi_driver	curvilinear_grid.h	/^  MPI_DRIVER<T> *mpi_driver; \/\/ for distributed grids$/;"	m	class:CURVILINEAR_GRID
mpi_driver	data_aggregator.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:DATA_AGGREGATOR
mpi_driver	interpolant.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:INTERPOLANT
mpi_driver	moving_grid_engine.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:MOVING_GRID_ENGINE
mpi_driver	navier_stokes_solver.h	/^  MPI_DRIVER<T>* mpi_driver;$/;"	m	class:NAVIER_STOKES_SOLVER
mpi_driver	potential_energy.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:POTENTIAL_ENERGY
mpi_driver	pressure.h	/^  MPI_DRIVER<T> *mpi_driver;$/;"	m	class:PRESSURE
mpi_driver	scalar.h	/^  MPI_DRIVER<T>* mpi_driver;$/;"	m	class:SCALAR
my_coords_in_grid	mpi_driver.h	/^  int *num_procs, *my_coords_in_grid;$/;"	m	class:MPI_DRIVER
my_rank	mpi_driver.h	/^  int my_rank, total_procs, num_dimensions;$/;"	m	class:MPI_DRIVER
my_rank	tridiagonal_solver.h	/^  int my_rank;$/;"	m	class:TRIDIAGONAL_SOLVER
nrth_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
nrth_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
num_cpu_x	parameters.h	/^      num_cpu_x, num_cpu_y, num_cpu_z, num_total_nodes_x, num_total_nodes_y, $/;"	m	class:PARAMETERS
num_cpu_y	parameters.h	/^      num_cpu_x, num_cpu_y, num_cpu_z, num_total_nodes_x, num_total_nodes_y, $/;"	m	class:PARAMETERS
num_cpu_z	parameters.h	/^      num_cpu_x, num_cpu_y, num_cpu_z, num_total_nodes_x, num_total_nodes_y, $/;"	m	class:PARAMETERS
num_dimensions	mpi_driver.h	/^  int my_rank, total_procs, num_dimensions;$/;"	m	class:MPI_DRIVER
num_local_nodes_x	parameters.h	/^      halo_size, num_local_nodes_x, num_local_nodes_y,num_local_nodes_z,$/;"	m	class:PARAMETERS
num_local_nodes_y	parameters.h	/^      halo_size, num_local_nodes_x, num_local_nodes_y,num_local_nodes_z,$/;"	m	class:PARAMETERS
num_local_nodes_z	parameters.h	/^      halo_size, num_local_nodes_x, num_local_nodes_y,num_local_nodes_z,$/;"	m	class:PARAMETERS
num_procs	mpi_driver.h	/^  int *num_procs, *my_coords_in_grid;$/;"	m	class:MPI_DRIVER
num_scalars	parameters.h	/^      num_total_nodes_z, time_step, num_scalars;$/;"	m	class:PARAMETERS
num_subgrid_local_nodes_x	parameters.h	/^      *num_subgrid_total_nodes_z, *num_subgrid_local_nodes_x, $/;"	m	class:PARAMETERS
num_subgrid_local_nodes_y	parameters.h	/^      *num_subgrid_local_nodes_y, *num_subgrid_local_nodes_z;  $/;"	m	class:PARAMETERS
num_subgrid_local_nodes_z	parameters.h	/^      *num_subgrid_local_nodes_y, *num_subgrid_local_nodes_z;  $/;"	m	class:PARAMETERS
num_subgrid_total_nodes_x	parameters.h	/^  int *num_subgrid_total_nodes_x, *num_subgrid_total_nodes_y, $/;"	m	class:PARAMETERS
num_subgrid_total_nodes_y	parameters.h	/^  int *num_subgrid_total_nodes_x, *num_subgrid_total_nodes_y, $/;"	m	class:PARAMETERS
num_subgrid_total_nodes_z	parameters.h	/^      *num_subgrid_total_nodes_z, *num_subgrid_local_nodes_x, $/;"	m	class:PARAMETERS
num_total_nodes_x	parameters.h	/^      num_cpu_x, num_cpu_y, num_cpu_z, num_total_nodes_x, num_total_nodes_y, $/;"	m	class:PARAMETERS
num_total_nodes_y	parameters.h	/^      num_cpu_x, num_cpu_y, num_cpu_z, num_total_nodes_x, num_total_nodes_y, $/;"	m	class:PARAMETERS
num_total_nodes_z	parameters.h	/^      num_total_nodes_z, time_step, num_scalars;$/;"	m	class:PARAMETERS
num_x_sub	curvilinear_grid.h	/^  ARRAY_1D<int> *num_x_sub, *num_y_sub, *num_z_sub;$/;"	m	class:CURVILINEAR_GRID
num_y_sub	curvilinear_grid.h	/^  ARRAY_1D<int> *num_x_sub, *num_y_sub, *num_z_sub;$/;"	m	class:CURVILINEAR_GRID
num_z_sub	curvilinear_grid.h	/^  ARRAY_1D<int> *num_x_sub, *num_y_sub, *num_z_sub;$/;"	m	class:CURVILINEAR_GRID
number_of_smoothing_iters	moving_grid_engine.h	/^  int number_of_smoothing_iters;$/;"	m	class:MOVING_GRID_ENGINE
omega	parameters.h	/^    omega, amp_p_grad, freq_p_grad;$/;"	m	class:PARAMETERS
open_top	parameters.h	/^      turbulence, moving_grid, open_top, variable_fixed_depth, coriolis;$/;"	m	class:PARAMETERS
operator !=	vector_3d.h	/^  bool operator!= (const VECTOR_3D<T>& rhs) const$/;"	f	class:VECTOR_3D
operator ()	array_1d.h	/^T ARRAY_1D<T>::operator () (const int n) const $/;"	f	class:ARRAY_1D
operator ()	array_1d.h	/^T& ARRAY_1D<T>::operator () (const int n) $/;"	f	class:ARRAY_1D
operator ()	array_2d.h	/^T ARRAY_2D<T>::operator () (const int i, const int j) const$/;"	f	class:ARRAY_2D
operator ()	array_2d.h	/^T& ARRAY_2D<T>::operator () (const int i, const int j) $/;"	f	class:ARRAY_2D
operator ()	curvilinear_grid.h	/^  VECTOR_3D<T>  operator() (int i, int j, int k) const {return (*grid)(i,j,k);}$/;"	f	class:CURVILINEAR_GRID
operator ()	curvilinear_grid.h	/^  VECTOR_3D<T>& operator() (int i, int j, int k) {return (*grid)(i,j,k);}$/;"	f	class:CURVILINEAR_GRID
operator ()	universal_limiter.h	/^  T operator() (T ratio) const {$/;"	f	class:MUSCL_LIMITER
operator ()	universal_limiter.h	/^  T operator() (T ratio) const {return (T)0;}$/;"	f	class:UPWIND_LIMITER
operator *	array_2d.h	/^  ARRAY_2D<T> operator*(const T scalar)$/;"	f	class:ARRAY_2D
operator *	array_3d.h	/^  ARRAY_3D<T2> operator*(ARRAY_3D<T2>& av)$/;"	f	class:ARRAY_3D
operator *	array_3d.h	/^  ARRAY_3D<T> operator*(const ARRAY_3D<T2>& av)$/;"	f	class:ARRAY_3D
operator *	array_3d.h	/^  ARRAY_3D<T> operator*(const ARRAY_3D<T>& a)$/;"	f	class:ARRAY_3D
operator *	array_3d.h	/^  ARRAY_3D<T> operator*(const T& scalar)$/;"	f	class:ARRAY_3D
operator *	array_3d.h	/^  friend ARRAY_3D<T> operator*(const T2 s, const ARRAY_3D<T>& a)$/;"	f	class:ARRAY_3D
operator *	vector_3d.h	/^  VECTOR_3D<T> operator*(const T scalar) const$/;"	f	class:VECTOR_3D
operator *	vector_3d.h	/^  VECTOR_3D<T> operator*(const VECTOR_3D<T>& v) const$/;"	f	class:VECTOR_3D
operator *	vector_3d.h	/^  friend VECTOR_3D<T> operator*(const T& scalar, const VECTOR_3D<T>& v)$/;"	f	class:VECTOR_3D
operator *=	array_2d.h	/^  ARRAY_2D<T>& operator*=(const ARRAY_2D<T>& source) \/\/element-wise$/;"	f	class:ARRAY_2D
operator *=	array_3d.h	/^  ARRAY_3D<T>& operator*=(const ARRAY_3D<T2>& av)$/;"	f	class:ARRAY_3D
operator *=	array_3d.h	/^  ARRAY_3D<T>& operator*=(const ARRAY_3D<T>& source) \/\/element-wise$/;"	f	class:ARRAY_3D
operator *=	array_3d.h	/^  ARRAY_3D<T>& operator*=(const T& scalar)$/;"	f	class:ARRAY_3D
operator *=	vector_3d.h	/^  VECTOR_3D<T>& operator*=(const T scalar)$/;"	f	class:VECTOR_3D
operator *=	vector_3d.h	/^  VECTOR_3D<T>& operator*=(const VECTOR_3D<T>& v)$/;"	f	class:VECTOR_3D
operator +	array_3d.h	/^  ARRAY_3D<T> operator+(const ARRAY_3D<T>& a)$/;"	f	class:ARRAY_3D
operator +	vector_3d.h	/^  VECTOR_3D<T> operator+(const VECTOR_3D<T>& v) const$/;"	f	class:VECTOR_3D
operator +=	array_2d.h	/^  ARRAY_2D<T>& operator+=(const ARRAY_2D<T>& source)$/;"	f	class:ARRAY_2D
operator +=	array_3d.h	/^  ARRAY_3D<T>& operator+=(const ARRAY_3D<T>& source)$/;"	f	class:ARRAY_3D
operator +=	vector_3d.h	/^  VECTOR_3D<T>& operator+=(const VECTOR_3D<T>& v)$/;"	f	class:VECTOR_3D
operator -	vector_3d.h	/^  VECTOR_3D<T> operator-() const$/;"	f	class:VECTOR_3D
operator -	vector_3d.h	/^  VECTOR_3D<T> operator-(const VECTOR_3D<T>& v) const$/;"	f	class:VECTOR_3D
operator -=	array_2d.h	/^  ARRAY_2D<T>& operator-=(const ARRAY_2D<T>& source)$/;"	f	class:ARRAY_2D
operator -=	array_3d.h	/^  ARRAY_3D<T>& operator-=(const ARRAY_3D<T>& source)$/;"	f	class:ARRAY_3D
operator -=	vector_3d.h	/^  VECTOR_3D<T>& operator-=(const VECTOR_3D<T>& v)$/;"	f	class:VECTOR_3D
operator /	array_3d.h	/^  ARRAY_3D<T> operator\/(const ARRAY_3D<T>& a)$/;"	f	class:ARRAY_3D
operator /	vector_3d.h	/^  VECTOR_3D<T> operator\/(const T scalar) const$/;"	f	class:VECTOR_3D
operator /=	array_2d.h	/^  ARRAY_2D<T>& operator\/=(const ARRAY_2D<T>& source) \/\/element-wise$/;"	f	class:ARRAY_2D
operator /=	array_3d.h	/^  ARRAY_3D<T>& operator\/=(const T scalar)$/;"	f	class:ARRAY_3D
operator /=	vector_3d.h	/^  VECTOR_3D<T>& operator\/=(const T scalar)$/;"	f	class:VECTOR_3D
operator /=	vector_3d.h	/^  VECTOR_3D<T>& operator\/=(const VECTOR_3D<T>& v)$/;"	f	class:VECTOR_3D
operator <<	array_1d.h	/^inline ostream& operator<< (ostream& output, const ARRAY_1D<T>& theArray)$/;"	f
operator <<	array_2d.h	/^inline ostream& operator<< (ostream& output, const ARRAY_2D<T>& array)$/;"	f
operator <<	array_3d.h	/^inline ostream& operator<< (ostream& output, const ARRAY_3D<T>& a)$/;"	f
operator <<	vector_3d.h	/^inline ostream& operator<< (ostream& output, const VECTOR_3D<T>& v)$/;"	f
operator =	array_2d.h	/^  ARRAY_2D<T>& operator=(const ARRAY_2D<T>& source)$/;"	f	class:ARRAY_2D
operator =	array_3d.h	/^  ARRAY_3D<T>& operator=(const ARRAY_3D<T>& source)$/;"	f	class:ARRAY_3D
operator ==	array_3d.h	/^  bool operator==(const ARRAY_3D<T>& a) const$/;"	f	class:ARRAY_3D
operator ==	vector_3d.h	/^  bool operator== (const VECTOR_3D<T>& rhs) const$/;"	f	class:VECTOR_3D
output_dir	mpi_driver.h	/^  string output_dir, proc_coords_filename;$/;"	m	class:MPI_DRIVER
output_dir	parameters.h	/^  std::string output_dir, grid_filename;$/;"	m	class:PARAMETERS
p	potential_energy.h	/^  int &p; \/\/shortcut for num cpu$/;"	m	class:POTENTIAL_ENERGY
param_map	parameter_file_parser.h	/^  map<string, string> *param_map;$/;"	m	class:PARAMETER_FILE_PARSER
parameter_filename	parameter_file_parser.h	/^  string parameter_filename;$/;"	m	class:PARAMETER_FILE_PARSER
parameters	convection.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:CONVECTION
parameters	curvilinear_grid.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:CURVILINEAR_GRID
parameters	data_aggregator.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:DATA_AGGREGATOR
parameters	moving_grid_engine.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:MOVING_GRID_ENGINE
parameters	navier_stokes_solver.h	/^  PARAMETERS<T>* parameters;$/;"	m	class:NAVIER_STOKES_SOLVER
parameters	potential_energy.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:POTENTIAL_ENERGY
parameters	pressure.h	/^  PARAMETERS<T> *parameters;$/;"	m	class:PRESSURE
parameters	scalar.h	/^  PARAMETERS<T>* parameters;$/;"	m	class:SCALAR
parser	parameters.h	/^  PARAMETER_FILE_PARSER<T> *parser;$/;"	m	class:PARAMETERS
periodic	mpi_driver.h	/^  int *periodic;$/;"	m	class:MPI_DRIVER
periodic_in_x	parameters.h	/^ bool periodic_in_x, periodic_in_y, periodic_in_z, $/;"	m	class:PARAMETERS
periodic_in_y	parameters.h	/^ bool periodic_in_x, periodic_in_y, periodic_in_z, $/;"	m	class:PARAMETERS
periodic_in_z	parameters.h	/^ bool periodic_in_x, periodic_in_y, periodic_in_z, $/;"	m	class:PARAMETERS
phi	navier_stokes_solver.h	/^  ARRAY_1D<ARRAY_3D<T>* > *phi;$/;"	m	class:NAVIER_STOKES_SOLVER
pi	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
pivots	potential_energy.h	/^  CELL<T> *rho_local_samples, *rho_global_samples, *pivots;$/;"	m	class:POTENTIAL_ENERGY
potential_energy	navier_stokes_solver.h	/^  POTENTIAL_ENERGY<T>* potential_energy;$/;"	m	class:NAVIER_STOKES_SOLVER
potential_energy	parameters.h	/^      potential_energy, scalar_advection, read_grid_from_file, aggregate_data,$/;"	m	class:PARAMETERS
pressure	navier_stokes_solver.h	/^  PRESSURE<T>* pressure;$/;"	m	class:NAVIER_STOKES_SOLVER
pressure_gradient	parameters.h	/^  VECTOR_3D<T>  *pressure_gradient;$/;"	m	class:PARAMETERS
prev_ET	curvilinear_moving_grid.h	/^  ARRAY_3D<VECTOR_3D<T> > *prev_grid, *prev_XI, *prev_ET, *prev_ZT; $/;"	m	class:CURVILINEAR_MOVING_GRID
prev_M	moving_grid_engine.h	/^  ARRAY_3D<T> *rho, *M, *prev_M; \/\/ monitor function$/;"	m	class:MOVING_GRID_ENGINE
prev_U_fluid	moving_grid_engine.h	/^  ARRAY_3D<VECTOR_3D<T> > *U_fluid, *prev_U_fluid;$/;"	m	class:MOVING_GRID_ENGINE
prev_U_grid_et	curvilinear_moving_grid.h	/^               *prev_U_grid_xi, *prev_U_grid_et, *prev_U_grid_zt;$/;"	m	class:CURVILINEAR_MOVING_GRID
prev_U_grid_xi	curvilinear_moving_grid.h	/^               *prev_U_grid_xi, *prev_U_grid_et, *prev_U_grid_zt;$/;"	m	class:CURVILINEAR_MOVING_GRID
prev_U_grid_zt	curvilinear_moving_grid.h	/^               *prev_U_grid_xi, *prev_U_grid_et, *prev_U_grid_zt;$/;"	m	class:CURVILINEAR_MOVING_GRID
prev_XI	curvilinear_moving_grid.h	/^  ARRAY_3D<VECTOR_3D<T> > *prev_grid, *prev_XI, *prev_ET, *prev_ZT; $/;"	m	class:CURVILINEAR_MOVING_GRID
prev_ZT	curvilinear_moving_grid.h	/^  ARRAY_3D<VECTOR_3D<T> > *prev_grid, *prev_XI, *prev_ET, *prev_ZT; $/;"	m	class:CURVILINEAR_MOVING_GRID
prev_grid	curvilinear_moving_grid.h	/^  ARRAY_3D<VECTOR_3D<T> > *prev_grid, *prev_XI, *prev_ET, *prev_ZT; $/;"	m	class:CURVILINEAR_MOVING_GRID
print_timestep_period	parameters.h	/^      save_data_timestep_period, print_timestep_period,$/;"	m	class:PARAMETERS
proc_coords_filename	mpi_driver.h	/^  string output_dir, proc_coords_filename;$/;"	m	class:MPI_DRIVER
read_grid_from_file	parameters.h	/^      potential_energy, scalar_advection, read_grid_from_file, aggregate_data,$/;"	m	class:PARAMETERS
recv_displacements	potential_energy.h	/^      *send_displacements, *recv_displacements;$/;"	m	class:POTENTIAL_ENERGY
resolve_interface_in_y	parameters.h	/^      resolve_interface_in_y, stretch_in_x, stretch_in_y, stretch_in_z, $/;"	m	class:PARAMETERS
restart_timestep	parameters.h	/^ int  restart_timestep, max_timestep, $/;"	m	class:PARAMETERS
rho	convection.h	/^  ARRAY_3D<T> *rho;$/;"	m	class:CONVECTION
rho	moving_grid_engine.h	/^  ARRAY_3D<T> *rho, *M, *prev_M; \/\/ monitor function$/;"	m	class:MOVING_GRID_ENGINE
rho	potential_energy.h	/^  ARRAY_3D<T> *rho;$/;"	m	class:POTENTIAL_ENERGY
rho	potential_energy.h	/^  T rho, volume;$/;"	m	struct:CELL
rho_global_samples	potential_energy.h	/^  CELL<T> *rho_local_samples, *rho_global_samples, *pivots;$/;"	m	class:POTENTIAL_ENERGY
rho_local_cells	potential_energy.h	/^  CELL<T> *rho_local_cells, *rho_sorted_cells;$/;"	m	class:POTENTIAL_ENERGY
rho_local_samples	potential_energy.h	/^  CELL<T> *rho_local_samples, *rho_global_samples, *pivots;$/;"	m	class:POTENTIAL_ENERGY
rho_sorted_cells	potential_energy.h	/^  CELL<T> *rho_local_cells, *rho_sorted_cells;$/;"	m	class:POTENTIAL_ENERGY
save_data_timestep_period	parameters.h	/^      save_data_timestep_period, print_timestep_period,$/;"	m	class:PARAMETERS
save_fluxes	parameters.h	/^      save_fluxes, save_instant_velocity, save_pressure, sediment_advection, $/;"	m	class:PARAMETERS
save_instant_velocity	parameters.h	/^      save_fluxes, save_instant_velocity, save_pressure, sediment_advection, $/;"	m	class:PARAMETERS
save_pressure	parameters.h	/^      save_fluxes, save_instant_velocity, save_pressure, sediment_advection, $/;"	m	class:PARAMETERS
scalar0	navier_stokes_solver.h	/^  SCALAR<T>* scalar0, *scalar1;$/;"	m	class:NAVIER_STOKES_SOLVER
scalar1	navier_stokes_solver.h	/^  SCALAR<T>* scalar0, *scalar1;$/;"	m	class:NAVIER_STOKES_SOLVER
scalar_advection	parameters.h	/^      potential_energy, scalar_advection, read_grid_from_file, aggregate_data,$/;"	m	class:PARAMETERS
sediment_advection	parameters.h	/^      save_fluxes, save_instant_velocity, save_pressure, sediment_advection, $/;"	m	class:PARAMETERS
send_displacements	potential_energy.h	/^      *send_displacements, *recv_displacements;$/;"	m	class:POTENTIAL_ENERGY
sim_time	parameters.h	/^  clock_t sim_time;$/;"	m	class:PARAMETERS
size	array_1d.h	/^  int min_n, max_n, size;$/;"	m	class:ARRAY_1D
sorted_array_part_sizes_recv	potential_energy.h	/^  int *sorted_array_part_sizes_send, *sorted_array_part_sizes_recv,$/;"	m	class:POTENTIAL_ENERGY
sorted_array_part_sizes_send	potential_energy.h	/^  int *sorted_array_part_sizes_send, *sorted_array_part_sizes_recv,$/;"	m	class:POTENTIAL_ENERGY
status	mpi_driver.h	/^  MPI_Status status; $/;"	m	class:MPI_DRIVER
stretch_in_x	parameters.h	/^      resolve_interface_in_y, stretch_in_x, stretch_in_y, stretch_in_z, $/;"	m	class:PARAMETERS
stretch_in_y	parameters.h	/^      resolve_interface_in_y, stretch_in_x, stretch_in_y, stretch_in_z, $/;"	m	class:PARAMETERS
stretch_in_z	parameters.h	/^      resolve_interface_in_y, stretch_in_x, stretch_in_y, stretch_in_z, $/;"	m	class:PARAMETERS
subgrid_levels	curvilinear_grid.h	/^      subgrid_levels;$/;"	m	class:CURVILINEAR_GRID
suth_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
suth_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
tau	turbulence.h	/^  ARRAY_3D<VECTOR_3D<T> > *tau;$/;"	m	class:TURBULENCE
time	parameters.h	/^  T time, delta_time, molecular_viscosity, molecular_diffusivity, g, pi, $/;"	m	class:PARAMETERS
time_step	parameters.h	/^      num_total_nodes_z, time_step, num_scalars;$/;"	m	class:PARAMETERS
total_procs	mpi_driver.h	/^  int my_rank, total_procs, num_dimensions;$/;"	m	class:MPI_DRIVER
total_size	array_2d.h	/^  int total_size;$/;"	m	class:ARRAY_2D
total_size	array_3d.h	/^  int total_size;$/;"	m	class:ARRAY_3D
total_time	parameters.h	/^  float elapsed_time, total_time;$/;"	m	class:PARAMETERS
ts_counter	data_aggregator.h	/^  int array_size, host_cpu, ts_counter;$/;"	m	class:DATA_AGGREGATOR
turbulence	navier_stokes_solver.h	/^  TURBULENCE<T>* turbulence;$/;"	m	class:NAVIER_STOKES_SOLVER
turbulence	parameters.h	/^      turbulence, moving_grid, open_top, variable_fixed_depth, coriolis;$/;"	m	class:PARAMETERS
turbulence	scalar.h	/^  TURBULENCE<T>* turbulence;$/;"	m	class:SCALAR
u	data_aggregator.h	/^  ARRAY_3D<VECTOR_3D<T> > *u;$/;"	m	class:DATA_AGGREGATOR
u	navier_stokes_solver.h	/^  ARRAY_3D<VECTOR_3D<T> > *u, *RHS_for_AB;$/;"	m	class:NAVIER_STOKES_SOLVER
u	pressure.h	/^  ARRAY_3D<VECTOR_3D<T> > *u;$/;"	m	class:PRESSURE
u_center_aggregate	data_aggregator.h	/^  T *u_center_aggregate;$/;"	m	class:DATA_AGGREGATOR
u_time_average	data_aggregator.h	/^  ARRAY_3D<VECTOR_3D<T> > *u_time_average;$/;"	m	class:DATA_AGGREGATOR
universal_limiter	parameters.h	/^  Limiter_Type universal_limiter;$/;"	m	class:PARAMETERS
upper_boundary	convection.h	/^  int *lower_boundary, *upper_boundary;           \/\/ set per proc$/;"	m	class:CONVECTION
variable_fixed_depth	parameters.h	/^      turbulence, moving_grid, open_top, variable_fixed_depth, coriolis;$/;"	m	class:PARAMETERS
vol_array_size	curvilinear_moving_grid.h	/^  int vol_array_size;$/;"	m	class:CURVILINEAR_MOVING_GRID
volume	potential_energy.h	/^  T rho, volume;$/;"	m	struct:CELL
west_bc	parameters.h	/^  BC_Type west_bc, east_bc, suth_bc, nrth_bc, back_bc, frnt_bc;$/;"	m	class:PARAMETERS
west_proc	mpi_driver.h	/^  int west_proc, east_proc, suth_proc, nrth_proc, back_proc, frnt_proc;$/;"	m	class:MPI_DRIVER
x	vector_3d.h	/^  T x,y,z;$/;"	m	class:VECTOR_3D
x_length	curvilinear_grid.h	/^    x_length, y_length, z_length; $/;"	m	class:CURVILINEAR_GRID
x_length	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
x_max	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
x_max	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
x_min	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
x_min	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
y	vector_3d.h	/^  T x,y,z;$/;"	m	class:VECTOR_3D
y_length	curvilinear_grid.h	/^    x_length, y_length, z_length; $/;"	m	class:CURVILINEAR_GRID
y_length	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
y_max	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
y_max	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
y_min	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
y_min	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
y_stretching_ratio	parameters.h	/^    domain_skew_angle, y_stretching_ratio;$/;"	m	class:PARAMETERS
z	vector_3d.h	/^  T x,y,z;$/;"	m	class:VECTOR_3D
z_length	curvilinear_grid.h	/^    x_length, y_length, z_length; $/;"	m	class:CURVILINEAR_GRID
z_length	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
z_max	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
z_max	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
z_min	curvilinear_grid.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, \/\/ global domain boundaries$/;"	m	class:CURVILINEAR_GRID
z_min	parameters.h	/^  T x_min, x_max, y_min, y_max, z_min, z_max, x_length, y_length, z_length,$/;"	m	class:PARAMETERS
~ARRAY_1D	array_1d.h	/^  ~ARRAY_1D() { delete [] array;}$/;"	f	class:ARRAY_1D
~ARRAY_2D	array_2d.h	/^  ~ARRAY_2D() { delete [] array;}$/;"	f	class:ARRAY_2D
~ARRAY_3D	array_3d.h	/^  ~ARRAY_3D() { delete [] array;}$/;"	f	class:ARRAY_3D
~CONVECTION	convection.h	/^  ~CONVECTION(){delete limiter;}$/;"	f	class:CONVECTION
~CURVILINEAR_MOVING_GRID	curvilinear_moving_grid.h	/^CURVILINEAR_MOVING_GRID<T>::~CURVILINEAR_MOVING_GRID()$/;"	f	class:CURVILINEAR_MOVING_GRID
~DATA_AGGREGATOR	data_aggregator.h	/^  ~DATA_AGGREGATOR() {$/;"	f	class:DATA_AGGREGATOR
~INTERPOLANT	interpolant.h	/^INTERPOLANT<T>::~INTERPOLANT() $/;"	f	class:INTERPOLANT
~METRIC_QUANTITIES	metric_quantities.h	/^  ~METRIC_QUANTITIES() $/;"	f	class:METRIC_QUANTITIES
~MOVING_GRID_ENGINE	moving_grid_engine.h	/^MOVING_GRID_ENGINE<T>::~MOVING_GRID_ENGINE() $/;"	f	class:MOVING_GRID_ENGINE
~MPI_DRIVER	mpi_driver.h	/^  ~MPI_DRIVER()$/;"	f	class:MPI_DRIVER
~PARAMETERS	parameters.h	/^  ~PARAMETERS()$/;"	f	class:PARAMETERS
~PARAMETER_FILE_PARSER	parameter_file_parser.h	/^  ~PARAMETER_FILE_PARSER() {if(param_map) delete param_map;}$/;"	f	class:PARAMETER_FILE_PARSER
~POTENTIAL_ENERGY	potential_energy.h	/^  ~POTENTIAL_ENERGY() $/;"	f	class:POTENTIAL_ENERGY
~PRESSURE	pressure.h	/^  ~PRESSURE()$/;"	f	class:PRESSURE
~SCALAR	scalar.h	/^SCALAR<T>::~SCALAR()$/;"	f	class:SCALAR
~TRIDIAGONAL_SOLVER	tridiagonal_solver.h	/^  ~TRIDIAGONAL_SOLVER() {}$/;"	f	class:TRIDIAGONAL_SOLVER
~TURBULENCE	turbulence.h	/^  ~TURBULENCE() {}$/;"	f	class:TURBULENCE
